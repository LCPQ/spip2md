// SPIP Markup grammar for Lark parser

start: _N* block ( _N+ block )+ _N*

?block: paragraph
      | heading
      | list
      | table
      | orphan_tag
      | SEPARATOR -> hr

list: unordered_list
    | ordered_list

unordered_list: ( _HYPHEN_STAR list_element _N )+ -> ul
ordered_list: ( _HYPHEN_HASH list_element _N )+ -> ol
list_element: _inline_format -> li

table: ( table_meta _N )? ( row _N )+ -> table
table_meta: _PIPE _PIPE TEXT _PIPE TEXT _PIPE _PIPE -> title_description
row: ( _PIPE cell )+ _PIPE -> tr
cell: _inline_format -> td

heading: _O_CURLY_3 ( TEXT | link | nested_italic | nested_bold ) _C_CURLY_3 -> h2

paragraph: ( _inline_format _N? )+ -> p

_inline_format: TEXT
              | italic
              | bold
              | link
              | orphan_tag
              | tag

bold: _O_CURLY_2 ( TEXT | link | nested_italic )+ _C_CURLY_2 -> strong
italic: _O_CURLY ( TEXT | link | nested_bold )+ _C_CURLY -> em
nested_bold: TEXT+ _O_CURLY_2 ( TEXT | link )+ _C_CURLY_2 -> strong
nested_italic: TEXT+ _O_CURLY ( TEXT | link )+ _C_CURLY -> em

?link: footnote
     | wikipedia_link
     | a

footnote: _O_SQUARE_2 HREF _C_SQUARE_2 -> footnote
wikipedia_link: _O_SQUARE_INTERO HREF _C_SQUARE -> a_wikipedia
a: _LINK_OPENING LINK_TEXT _ARROW HREF _C_SQUARE -> a

tag: closing_tag
   | opening_tag

orphan_tag: _ORPHAN_OPENING TEXT ( _PIPE TEXT )? _C_ANGLE -> orphan_tag
closing_tag: _O_ANGLE _SLASH TEXT ( _PIPE TEXT )? _C_ANGLE -> closing_tag
opening_tag: _O_ANGLE TEXT ( _PIPE TEXT )? _C_ANGLE -> opening_tag

// Terminals
_N: /\r?\n/
SEPARATOR: "----" "-"*
TEXT: ( PURE_TEXT | AMBIGUOUS_TEXT )+

_HYPHEN_STAR: "-*"
_HYPHEN_HASH: "-#"
_PIPE: "|"
_SLASH: "/"
_O_ANGLE: "<"
_C_ANGLE: ">"
_ORPHAN_OPENING: /<(?=([^>\/]+?)>)(?!.*<\/\1>)/

_O_CURLY_3: "{{{"
_C_CURLY_3: "}}}"
_O_CURLY_2: "{{"
_C_CURLY_2: "}}"
_O_CURLY: "{"
_C_CURLY: "}"

_O_SQUARE_2: "[["
_C_SQUARE_2: "]]"
_O_SQUARE_INTERO: "[?"
_C_SQUARE: "]"
_ARROW: "->"
_LINK_OPENING: /\[(?=/ PURE_TEXT+ /]*->)/
HREF: PURE_TEXT+
LINK_TEXT: PURE_TEXT /+(?=->)/

/// Every characters that have no markup meaning
PURE_TEXT: /[^\r\n\|\{\}\[\]\<\>]/
/// Characters that could be markup but arenâ€™t in this situation
AMBIGUOUS_TEXT: /\[(?!.*->.*\])/
              | /\]/
